from typing import List

class UnionFind:
    
  def __init__(self, n):
      self.roots = [i for i in range(n)]
      self.size = [1 for i in range(n)]
      
  def find_root(self, _id):
      if self.roots[_id] != _id:
        self.roots[_id] = self.find_root(self.roots[_id])
      return self.roots[_id]
  
  def union(self, l_id, r_id):
    l_root = self.find_root(l_id)
    r_root = self.find_root(r_id)
    
    if r_root == l_root:
        return 
    
    if self.size[l_root] > self.size[r_root]:
        l_root, r_root = r_root, l_root
        
    self.roots[l_root] = r_root
    self.size[r_root] += self.size[l_root]
      

class Solution:
  def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
    uf = UnionFind(len(graph))
    
    for i in range(len(graph)):
      for j in range(i, len(graph)):
        if graph[i][j] == 1:
          uf.union(i, j)
    print(uf.roots)

    m = -float('inf')
    res = []
    for i in initial:
      i_root = uf.find_root(i)
      if uf.size[i_root] > m:
        m = uf.size[i_root]
        res.append(i)
      elif uf.size[i_root] == m:
        res.append(i)

    return min(res)
      
        